schema {
    query: Query
    mutation: Mutation
}

input ContactInput {
    website: String
    phone: String
    email: String
    other: [OtherInput]
}

input CurriculumVitaeInput {
    name: String
    meta: MetaInput
    info: InfoInput
    contact: ContactInput
    location: LocationInput
    projects: [ProjectInput]
    social: [SocialInput]
    employment: EmploymentInput
    education: EducationInput
    skills: SkillsInput
    samples: [SampleInput]
    references: [ReferenceInput]
    languages: [LanguageInput]
    interests: [InterestInput]
}

input DegreeHistoryInput {
    institution: String
    title: String
    url: String
    start: String
    end: String
    grade: String
    summary: String
    curriculum: [String]
}

input EducationInput {
    summary: String
    level: String
    degree: String
    history: [DegreeHistoryInput]
}

input EmploymentInput {
    summary: String
    history: [HistoryInput]
}

input HistoryInput {
    employer: String
    url: String
    position: String
    summary: String
    start: String
    end: String
    keywords: [String]
    highlights: [String]
}

input InfoInput {
    label: String
    characterClass: String
    brief: String
    image: String
    quote: String
}

input InterestInput {
    name: String
    summary: String
    keywords: [String]
}

input LanguageInput {
    language: String
    level: String
}

input LocationInput {
    address: String
    city: String
    region: String
    code: String
    countryCode: String
}

input MediaInput {
    category: String
    url: String
}

input MetaInput {
    format: String
    version: String
}

input OtherInput {
    label: String
    flavor: String
    value: String
}

input ProjectInput {
    title: String
    category: String
    role: String
    url: String
    start: String
    end: String
    repo: String
    description: String
    summary: String
    keywords: [String]
    media: [MediaInput]
}

input ReferenceInput {
    name: String
    flavor: String
    private: Boolean
    contact: [ReferenceContactInput]
}

input ReferenceContactInput {
    label: String
    flavor: String
    value: String
}

input SampleInput {
    title: String
    summary: String
    url: String
    date: String
}

input SetInput {
    name: String
    level: String
    skills: [String]
}

input SkillInput {
    name: String
    summary: String
    level: String
    years: String
    proof: String
}

input SkillsInput {
    sets: [SetInput]
    list: [SkillInput]
}

input SocialInput {
    label: String
    network: String
    user: String
    url: String
}

# Datatype for any contact information person has
type Contact {
    id: ID!
    website: String
    phone: String
    email: String
    other: [Other]
}

# Main datatype for CurriculumVitae-bank is CurriculumVitae. It's used as base for persons CurriculumVitae
type CurriculumVitae {
    id: ID!
    name: String
    meta: Meta
    info: Info
    contact: Contact
    location: Location
    projects: [Project]
    social: [Social]
    employment: Employment
    education: Education
    skills: Skills
    samples: [Sample]
    references: [Reference]
    languages: [Language]
    interests: [Interest]
}

# Degree's history information type
type DegreeHistory {
    id: ID!
    institution: String
    title: String
    url: String
    start: String
    end: String
    grade: String
    summary: String
    curriculum: [String]
}

# Education is representation of any education person has
type Education {
    id: ID!
    summary: String
    level: String
    degree: String
    history: [DegreeHistory]
}

# Type for persons employment information
type Employment {
    id: ID!
    summary: String
    history: [History]
}

# Datatype for persons employment history
type History {
    id: ID!
    employer: String
    url: String
    position: String
    summary: String
    start: String
    end: String
    keywords: [String]
    highlights: [String]
}

# Type for employment info information
type Info {
    id: ID!
    label: String
    characterClass: String
    brief: String
    image: String
    quote: String
}

# Datatype for interest
type Interest {
    id: ID!
    name: String
    summary: String
    keywords: [String]
}

# Language is datatype for any language skills person has
type Language {
    id: ID!
    language: String
    level: String
}

# Location is datatype for physical location person is associated: living address
type Location {
    id: ID!
    address: String
    city: String
    region: String
    code: String
    countryCode: String
}

# Datatype Media
type Media {
    id: ID!
    category: String
    url: String
}

# Datatype Meta
type Meta {
    id: ID!
    format: String
    version: String
}

# Datatype Other
type Other {
    id: ID!
    label: String
    flavor: String
    value: String
}

# Datatype for projects person has been involved
type Project {
    id: ID!
    title: String
    category: String
    role: String
    url: String
    start: String
    end: String
    repo: String
    description: String
    summary: String
    keywords: [String]
    media: [Media]
}

# Datatype for any reference contact for person
type Reference {
    id: ID!
    name: String
    flavor: String
    private: Boolean
    contact: [ReferenceContact]
}

# Datatype for any reference person has
type ReferenceContact {
    id: ID!
    label: String
    flavor: String
    value: String
}

# Datatype for any work samples person might have
type Sample {
    id: ID!
    title: String
    summary: String
    url: String
    date: String
}

# Datatype for set (for skills)
type Set {
    id: ID!
    name: String
    level: String
    skills: [String]
}

# Datatype for persons skills
type Skill {
    id: ID!
    name: String
    summary: String
    level: String
    years: String
    proof: String
}

# Datatype for skills as list and set
type Skills {
    id: ID!
    sets: [Set]
    list: [Skill]
}

# Datatype for social connections the person has
type Social {
    id: ID!
    label: String
    network: String
    user: String
    url: String
}

# All query endpoints available for CurriculumVitae bank
type Query {

    # The API Version
    version: String

    # Get curriculum vitae with skills
    curriculumVitaesBySkills(skills: SkillsInput!): [CurriculumVitae]

    # Get curriculum vitae with ID
    curriculumVitae(id: ID!): CurriculumVitae

    # Get currciculum vitae with name
    curriculumVitaeByName(name: String!): CurriculumVitae
}

# All data change endpoints for cvbank. You can use createCurriculumVitae to create whole CurriculumVitae collection.
type Mutation {

    # Create a new CurriculumVitae collection
    createCurriculumVitae(input: CurriculumVitaeInput!): CurriculumVitae!

    # Create a new CurriculumVitae collection
    updateCurriculumVitae(id: ID!, input: CurriculumVitaeInput!): CurriculumVitae!

    # Delete CurriculumVitae collection
    deleteCurriculumVitae(id: ID!): String
}